{"version":3,"sources":["components/NavBar/NavBar.tsx","pages/HomePage/HomePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","api.ts","store/PeopleContext/PeopleContext.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilter/PeopleFilters.tsx","types/SortBy.ts","components/PersonItem/PersonItem.tsx","components/PeopleList/PeopleList.tsx","utils/filterPeople.ts","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","pages/PeoplePage/PeoplePage.tsx","utils/toCapitalize.ts","App.tsx","index.tsx"],"names":["getClassesLink","isActive","classNames","NavBar","className","role","to","HomePage","NotFoundPage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","initialContext","people","isLoading","errorMessage","PeopleProvider","createContext","PeopleContext","children","useState","setPeople","setIsLoading","setErrorMessage","containsPeople","useLocation","pathname","includes","useEffect","peopleFromServer","console","warn","initialValue","useMemo","Provider","value","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","params","props","useSearchParams","searchParams","search","ESexFilter","centuries","PeopleFilters","setSearchParams","sexParam","get","queryParam","centuriesParam","getAll","getGenderLinkStyle","gender","getCenturiesLinkStyle","centery","toggleCentries","filter","cent","sex","Male","Female","type","onChange","event","setSearchWith","query","target","placeholder","map","length","ESortBy","PersonItem","person","name","born","died","slug","motherName","fatherName","peopleId","useParams","mother","find","currentPerson","father","PeopleList","useContext","sortBy","orderBy","preparedPeople","normalizeQueryParam","toLowerCase","trim","peopleCentery","Math","ceil","hasSexParam","hasQueryParam","hasCenturiesParam","sort","personA","personB","Name","Sex","localeCompare","Born","Died","reverse","getPreparedPeople","tableHeaders","PeopleTable","sortParam","orderParam","columnName","toCapitalize","sortField","order","param","Loader","PeoplePage","shouldShowFiltering","String","prototype","this","charAt","toUpperCase","slice","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.bae6049a.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getClassesLink = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n);\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          className={getClassesLink}\n          to=\"/\"\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          className={getClassesLink}\n          to=\"people\"\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <section className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </section>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import {\n  FC,\n  ReactNode,\n  createContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\n\ninterface IInitialContext {\n  people: Person[];\n  isLoading: boolean;\n  errorMessage: string;\n}\n\ntype TPeopleContext = {\n  children: ReactNode;\n};\n\nconst initialContext: IInitialContext = {\n  people: [],\n  isLoading: false,\n  errorMessage: 'Something went wrong',\n};\n\nexport const PeopleProvider = createContext(initialContext);\n\nexport const PeopleContext: FC<TPeopleContext> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const { pathname } = useLocation();\n\n  const containsPeople = pathname.includes('/people');\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      if (!containsPeople) {\n        return;\n      }\n\n      try {\n        const peopleFromServer = await getPeople();\n\n        setPeople(peopleFromServer);\n\n        setIsLoading(false);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(error);\n\n        setErrorMessage('Something went wrong');\n        setIsLoading(false);\n      }\n    })();\n  }, [containsPeople]);\n\n  const initialValue = useMemo(() => ({\n    people,\n    isLoading,\n    errorMessage,\n  }), [people, isLoading, errorMessage]);\n\n  return (\n    <PeopleProvider.Provider value={initialValue}>\n      {children}\n    </PeopleProvider.Provider>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams, getSearchWith } from '../../utils/searchHelper';\n\nenum ESexFilter {\n  Male = 'm',\n  Female = 'f',\n}\n\nconst centuries: string[] = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sexParam = searchParams.get('sex');\n  const queryParam = searchParams.get('query') ?? '';\n  const centuriesParam = searchParams.getAll('centuries') ?? [];\n\n  const getGenderLinkStyle = (gender: string | null) => (\n    classNames({ 'is-active': gender === sexParam })\n  );\n\n  const getCenturiesLinkStyle = (centery: string) => (\n    classNames('button', 'mr-1', {\n      'is-info': centuriesParam.includes(centery),\n    })\n  );\n\n  const setSearchWith = (params: SearchParams) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  const handleSearchFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith({ query: event.target.value || null });\n  };\n\n  const toggleCentries = (centery: string) => {\n    const newCenturies = centuriesParam.includes(centery)\n      ? centuriesParam.filter(cent => cent !== centery)\n      : [...centuriesParam, centery];\n\n    return newCenturies;\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={getGenderLinkStyle(null)}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: ESexFilter.Male }}\n          className={getGenderLinkStyle(ESexFilter.Male)}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: ESexFilter.Female }}\n          className={getGenderLinkStyle(ESexFilter.Female)}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={queryParam}\n            onChange={handleSearchFilter}\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map((centery) => (\n              <SearchLink\n                key={centery}\n                data-cy=\"century\"\n                className={getCenturiesLinkStyle(centery)}\n                params={{ centuries: toggleCentries(centery) }}\n              >\n                {centery}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuriesParam.length,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          data-cy=\"centuryALL\"\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            query: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","export enum ESortBy {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { FC } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\n\ntype TTableItemProps = {\n  person: Person;\n  people: Person[];\n};\n\nexport const PersonItem: FC<TTableItemProps> = ({ person, people }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    slug,\n    motherName,\n    fatherName,\n  } = person;\n\n  const { peopleId } = useParams();\n\n  const mother = people\n    .find(currentPerson => currentPerson.name === motherName);\n\n  const father = people\n    .find(currentPerson => currentPerson.name === fatherName);\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': peopleId === slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames({\n            'has-text-danger': sex === 'f',\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link\n            className=\"has-text-danger\"\n            to={`/people/${mother?.slug}`}\n          >\n            {motherName}\n          </Link>\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <Link\n            to={`/people/${father?.slug}`}\n          >\n            {fatherName}\n          </Link>\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useContext } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getPreparedPeople } from '../../utils/filterPeople';\nimport { PeopleProvider } from '../../store/PeopleContext';\nimport { PersonItem } from '../PersonItem';\n\nexport const PeopleList = () => {\n  const { people, errorMessage } = useContext(PeopleProvider);\n\n  const [searchParams] = useSearchParams();\n  const sexParam = searchParams.get('sex') ?? '';\n  const queryParam = searchParams.get('query') ?? '';\n  const centuriesParam = searchParams.getAll('centuries') ?? [];\n  const sortBy = searchParams.get('sort') ?? '';\n  const orderBy = searchParams.get('order') ?? '';\n\n  const preparedPeople = getPreparedPeople(people, {\n    sexParam,\n    queryParam,\n    centuriesParam,\n    sortBy,\n    orderBy,\n  });\n\n  return (\n    <>\n      {preparedPeople.length !== 0 ? (\n        preparedPeople.map(person => (\n          <PersonItem\n            people={people}\n            key={person.slug}\n            person={person}\n          />\n        ))) : (\n        !errorMessage && (\n          <tr>\n            <th data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </th>\n          </tr>\n        ))}\n    </>\n  );\n};\n","import { ESortBy, Person } from '../types';\n\ninterface IParams {\n  sexParam: string;\n  queryParam: string;\n  centuriesParam: string[];\n  sortBy: string;\n  orderBy: string;\n}\n\nexport const getPreparedPeople = (people: Person[], {\n  sexParam,\n  queryParam,\n  centuriesParam,\n  sortBy,\n  orderBy,\n}: IParams) => {\n  if (!sexParam && !queryParam && !centuriesParam.length && !sortBy) {\n    return people;\n  }\n\n  let preparedPeople = people;\n\n  const normalizeQueryParam = queryParam.toLowerCase().trim();\n\n  preparedPeople = preparedPeople\n    .filter(({\n      born,\n      sex,\n      name,\n      motherName,\n      fatherName,\n    }) => {\n      const peopleCentery = `${Math.ceil(born / 100)}`;\n\n      const hasSexParam = !sexParam || sex === sexParam;\n      const hasQueryParam = !queryParam\n        || name.toLowerCase().includes(normalizeQueryParam)\n        || motherName?.toLowerCase().includes(normalizeQueryParam)\n        || fatherName?.toLowerCase().includes(normalizeQueryParam);\n\n      const hasCenturiesParam = !centuriesParam.length\n        || centuriesParam.includes(peopleCentery);\n\n      return hasSexParam && hasQueryParam && hasCenturiesParam;\n    });\n\n  if (sortBy) {\n    preparedPeople.sort((personA, personB) => {\n      switch (sortBy) {\n        case ESortBy.Name:\n        case ESortBy.Sex:\n          return personA[sortBy].localeCompare(personB[sortBy]);\n        case ESortBy.Born:\n        case ESortBy.Died:\n          return personA[sortBy] - personB[sortBy];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (orderBy) {\n    preparedPeople.reverse();\n  }\n\n  return preparedPeople;\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { PeopleList } from '../PeopleList';\nimport { SearchLink } from '../SearchLink';\nimport { ESortBy } from '../../types';\n\nconst tableHeaders: ESortBy[]\n  = [ESortBy.Name, ESortBy.Sex, ESortBy.Born, ESortBy.Died];\n\nexport const PeopleTable = () => {\n  const [searchParams] = useSearchParams();\n  const sortParam = searchParams.get('sort') ?? '';\n  const orderParam = searchParams.get('order') ?? '';\n\n  const getSortStyleLink = (param: string) => {\n    if (sortParam === param && orderParam) {\n      return 'fa-sort-down';\n    }\n\n    if (sortParam === param) {\n      return 'fa-sort-up';\n    }\n\n    return 'fa-sort';\n  };\n\n  const sortBy = (sortField: ESortBy) => {\n    if (sortParam !== sortField) {\n      return { sort: sortField, order: null };\n    }\n\n    if (!orderParam) {\n      return { sort: sortField, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableHeaders.map((columnName) => (\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {columnName.toCapitalize()}\n                <SearchLink\n                  params={sortBy(columnName)}\n                >\n                  <span className=\"icon\">\n                    <i className={`fas ${getSortStyleLink(columnName)}`} />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        <PeopleList />\n      </tbody>\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useContext } from 'react';\nimport { PeopleProvider } from '../../store/PeopleContext';\nimport { PeopleFilters } from '../../components/PeopleFilter';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { Loader } from '../../components/Loader';\n\ntype TPeopleProps = {};\n\nexport const PeoplePage: FC<TPeopleProps> = () => {\n  const { errorMessage, isLoading } = useContext(PeopleProvider);\n\n  const shouldShowFiltering = !errorMessage && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title container\">People Page</h1>\n\n      <div className=\"block container\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {shouldShowFiltering && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {!isLoading && <PeopleTable />}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export { };\n\ndeclare global {\n  interface String {\n    toCapitalize(): string;\n  }\n}\n\n// eslint-disable-next-line no-extend-native, func-names\nString.prototype.toCapitalize = function () {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport './App.scss';\nimport './utils/toCapitalize';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <NavBar />\n\n      <div className=\"section\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":peopleId\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeopleContext } from './store/PeopleContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <PeopleContext>\n        <App />\n      </PeopleContext>\n    </Router>,\n  );\n"],"sourceRoot":""}