{"version":3,"sources":["components/NavBar/NavBar.tsx","pages/HomePage/HomePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","api.ts","types/SortBy.ts","store/PeopleContext/PeopleContext.tsx","utils/filterPeople.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilter/PeopleFilters.tsx","components/PersonItem/PersonItem.tsx","components/PeopleList/PeopleList.tsx","components/PeopleTable/PeopleTable.tsx","components/Loader/Loader.tsx","pages/PeoplePage/PeoplePage.tsx","utils/toCapitalize.ts","App.tsx","index.tsx"],"names":["getClassesLink","isActive","classNames","NavBar","className","role","to","HomePage","NotFoundPage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","ESortBy","initialContext","preparedPeople","isLoading","errorMessage","PeopleProvider","createContext","PeopleContext","children","useSearchParams","searchParams","sexParam","get","queryParam","centuriesParam","getAll","sortBy","orderBy","useState","people","setPeople","setIsLoading","setErrorMessage","length","normalizeQueryParam","toLowerCase","trim","filter","born","sex","name","motherName","fatherName","peopleCentery","Math","ceil","hasSexParam","hasQueryParam","includes","hasCenturiesParam","sort","personA","personB","Name","Sex","localeCompare","Born","Died","reverse","getPreparedPeople","containsPeople","useLocation","pathname","useEffect","peopleFromServer","console","warn","initialValue","useMemo","Provider","value","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","params","props","search","ESexFilter","centuries","getGenderLinkStyle","gender","getCenturiesLinkStyle","centery","PeopleFilters","setSearchParams","toggleCentries","cent","Male","Female","type","onChange","event","setSearchWith","query","target","placeholder","map","ESex","PersonItem","person","died","slug","peopleId","useParams","mother","find","currentPerson","father","PeopleList","useContext","getSortStyleLink","param","orderParam","sortParam","sortField","order","tableHeaders","PeopleTable","columnName","toCapitalize","Loader","PeoplePage","shouldShowFiltering","String","prototype","this","charAt","toUpperCase","slice","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.fc7f2cc6.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getClassesLink = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n);\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          className={getClassesLink}\n          to=\"/\"\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          className={getClassesLink}\n          to=\"people\"\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <section className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </section>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ESortBy {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import {\n  FC,\n  ReactNode,\n  createContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { getPreparedPeople } from '../../utils/filterPeople';\n\ninterface IInitialContext {\n  preparedPeople: Person[];\n  isLoading: boolean;\n  errorMessage: string;\n}\n\ntype TPeopleContext = {\n  children: ReactNode;\n};\n\nconst initialContext: IInitialContext = {\n  preparedPeople: [],\n  isLoading: false,\n  errorMessage: 'Something went wrong',\n};\n\nexport const PeopleProvider = createContext(initialContext);\n\nexport const PeopleContext: FC<TPeopleContext> = ({ children }) => {\n  const [searchParams] = useSearchParams();\n  const sexParam = searchParams.get('sex') ?? '';\n  const queryParam = searchParams.get('query') ?? '';\n  const centuriesParam = searchParams.getAll('centuries') ?? [];\n  const sortBy = searchParams.get('sort') ?? '';\n  const orderBy = searchParams.get('order') ?? '';\n\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const preparedPeople = getPreparedPeople(people, {\n    sexParam,\n    queryParam,\n    centuriesParam,\n    sortBy,\n    orderBy,\n  });\n\n  const { pathname } = useLocation();\n\n  const containsPeople = pathname.includes('/people');\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      if (!containsPeople) {\n        return;\n      }\n\n      try {\n        const peopleFromServer = await getPeople();\n\n        setPeople(peopleFromServer);\n\n        setIsLoading(false);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(error);\n\n        setErrorMessage('Something went wrong');\n        setIsLoading(false);\n      }\n    })();\n  }, [containsPeople]);\n\n  const initialValue = useMemo(() => ({\n    preparedPeople,\n    isLoading,\n    errorMessage,\n  }), [preparedPeople, isLoading, errorMessage]);\n\n  return (\n    <PeopleProvider.Provider value={initialValue}>\n      {children}\n    </PeopleProvider.Provider>\n  );\n};\n","import { ESortBy, Person } from '../types';\n\ninterface IParams {\n  sexParam: string;\n  queryParam: string;\n  centuriesParam: string[];\n  sortBy: string;\n  orderBy: string;\n}\n\nexport const getPreparedPeople = (people: Person[], {\n  sexParam,\n  queryParam,\n  centuriesParam,\n  sortBy,\n  orderBy,\n}: IParams) => {\n  if (!sexParam && !queryParam && !centuriesParam.length && !sortBy) {\n    return people;\n  }\n\n  let preparedPeople = people;\n\n  const normalizeQueryParam = queryParam.toLowerCase().trim();\n\n  preparedPeople = preparedPeople\n    .filter(({\n      born,\n      sex,\n      name,\n      motherName,\n      fatherName,\n    }) => {\n      const peopleCentery = `${Math.ceil(born / 100)}`;\n\n      const hasSexParam = !sexParam || sex === sexParam;\n      const hasQueryParam = !queryParam\n        || name.toLowerCase().includes(normalizeQueryParam)\n        || motherName?.toLowerCase().includes(normalizeQueryParam)\n        || fatherName?.toLowerCase().includes(normalizeQueryParam);\n\n      const hasCenturiesParam = !centuriesParam.length\n        || centuriesParam.includes(peopleCentery);\n\n      return hasSexParam && hasQueryParam && hasCenturiesParam;\n    });\n\n  if (sortBy) {\n    preparedPeople.sort((personA, personB) => {\n      switch (sortBy) {\n        case ESortBy.Name:\n        case ESortBy.Sex:\n          return personA[sortBy].localeCompare(personB[sortBy]);\n        case ESortBy.Born:\n        case ESortBy.Died:\n          return personA[sortBy] - personB[sortBy];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (orderBy) {\n    preparedPeople.reverse();\n  }\n\n  return preparedPeople;\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams, getSearchWith } from '../../utils/searchHelper';\n\nenum ESexFilter {\n  Male = 'm',\n  Female = 'f',\n}\n\nconst centuries: string[] = ['16', '17', '18', '19', '20'];\n\ntype TGender = string | null;\n\nconst getGenderLinkStyle = (gender: TGender, sexParam: TGender) => (\n  classNames({ 'is-active': gender === sexParam })\n);\n\nconst getCenturiesLinkStyle = (centery: string, centuriesParam: string[]) => (\n  classNames('button', 'mr-1', {\n    'is-info': centuriesParam.includes(centery),\n  })\n);\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sexParam = searchParams.get('sex');\n  const queryParam = searchParams.get('query') ?? '';\n  const centuriesParam = searchParams.getAll('centuries') ?? [];\n\n  const setSearchWith = (params: SearchParams) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  const handleSearchFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith({ query: event.target.value || null });\n  };\n\n  const toggleCentries = (centery: string) => {\n    const newCenturies = centuriesParam.includes(centery)\n      ? centuriesParam.filter(cent => cent !== centery)\n      : [...centuriesParam, centery];\n\n    return newCenturies;\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={getGenderLinkStyle(null, sexParam)}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: ESexFilter.Male }}\n          className={getGenderLinkStyle(ESexFilter.Male, sexParam)}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: ESexFilter.Female }}\n          className={getGenderLinkStyle(ESexFilter.Female, sexParam)}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={queryParam}\n            onChange={handleSearchFilter}\n            placeholder=\"Search\"\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map((centery) => (\n              <SearchLink\n                key={centery}\n                data-cy=\"century\"\n                className={getCenturiesLinkStyle(centery, centuriesParam)}\n                params={{ centuries: toggleCentries(centery) }}\n              >\n                {centery}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuriesParam.length,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          data-cy=\"centuryALL\"\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            query: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { FC } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\n\ntype TTableItemProps = {\n  person: Person;\n  people: Person[];\n};\n\nenum ESex {\n  Female = 'f',\n}\n\nexport const PersonItem: FC<TTableItemProps> = ({ person, people }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    slug,\n    motherName,\n    fatherName,\n  } = person;\n\n  const { peopleId } = useParams();\n\n  const mother = people\n    .find(currentPerson => currentPerson.name === motherName);\n\n  const father = people\n    .find(currentPerson => currentPerson.name === fatherName);\n\n  const NOT_SET_VALUE = '-';\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': peopleId === slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames({\n            'has-text-danger': sex === ESex.Female,\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link\n            className=\"has-text-danger\"\n            to={`/people/${mother?.slug}`}\n          >\n            {motherName}\n          </Link>\n        ) : (\n          motherName || NOT_SET_VALUE\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <Link\n            to={`/people/${father?.slug}`}\n          >\n            {fatherName}\n          </Link>\n        ) : (\n          fatherName || NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useContext } from 'react';\nimport { PersonItem } from '../PersonItem';\nimport { PeopleProvider } from '../../store/PeopleContext';\n\nexport const PeopleList = () => {\n  const { preparedPeople } = useContext(PeopleProvider);\n\n  return (\n    <>\n      {preparedPeople.map(person => (\n        <PersonItem\n          people={preparedPeople}\n          key={person.slug}\n          person={person}\n        />\n      ))}\n    </>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PeopleList } from '../PeopleList';\nimport { SearchLink } from '../SearchLink';\nimport { ESortBy } from '../../types';\n\nconst getSortStyleLink = (\n  param: string,\n  orderParam: string,\n  sortParam: string,\n) => {\n  if (sortParam === param && orderParam) {\n    return 'fa-sort-down';\n  }\n\n  if (sortParam === param) {\n    return 'fa-sort-up';\n  }\n\n  return 'fa-sort';\n};\n\nconst sortBy = (sortField: ESortBy, sortParam: string, orderParam: string) => {\n  if (sortParam !== sortField) {\n    return { sort: sortField, order: null };\n  }\n\n  if (!orderParam) {\n    return { sort: sortField, order: 'desc' };\n  }\n\n  return { sort: null, order: null };\n};\n\nconst tableHeaders: ESortBy[]\n  = [ESortBy.Name, ESortBy.Sex, ESortBy.Born, ESortBy.Died];\n\nexport const PeopleTable = () => {\n  const [searchParams] = useSearchParams();\n  const sortParam = searchParams.get('sort') ?? '';\n  const orderParam = searchParams.get('order') ?? '';\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableHeaders.map((columnName) => (\n            <th\n              key={columnName}\n            >\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {columnName.toCapitalize()}\n                <SearchLink\n                  params={sortBy(columnName, sortParam, orderParam)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'fas',\n                      getSortStyleLink(columnName, orderParam, sortParam),\n                    )}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        <PeopleList />\n      </tbody>\n    </table>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useContext } from 'react';\nimport { PeopleProvider } from '../../store/PeopleContext';\nimport { PeopleFilters } from '../../components/PeopleFilter';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { Loader } from '../../components/Loader';\n\ntype TPeopleProps = {};\n\nexport const PeoplePage: FC<TPeopleProps> = () => {\n  const {\n    errorMessage,\n    isLoading,\n    preparedPeople,\n  } = useContext(PeopleProvider);\n\n  const shouldShowFiltering = !errorMessage && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title container\">People Page</h1>\n\n      <div className=\"block container\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {shouldShowFiltering && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {shouldShowFiltering && !!preparedPeople.length && (\n                <PeopleTable />\n              )}\n\n              {shouldShowFiltering && !preparedPeople.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export { };\n\ndeclare global {\n  interface String {\n    toCapitalize(): string;\n  }\n}\n\n// eslint-disable-next-line no-extend-native, func-names\nString.prototype.toCapitalize = function () {\n  return this.charAt(0).toUpperCase() + this.slice(1);\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport './App.scss';\nimport './utils/toCapitalize';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <NavBar />\n\n      <div className=\"section\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":peopleId\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeopleContext } from './store/PeopleContext';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <PeopleContext>\n        <App />\n      </PeopleContext>\n    </Router>,\n  );\n"],"sourceRoot":""}